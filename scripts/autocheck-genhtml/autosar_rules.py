################################################################################
# Copyright (C) 2023 SYRMIA
# Part of the Autocheck Project, under the Apache License v2.0.
# See LICENSE for details.
# SPDX-License-Identifier: Apache-2.0
################################################################################

from enum import Enum
from typing import NamedTuple, Optional

class Obligation(Enum):
    REQUIRED = "Required"
    ADVISORY = "Advisory"

class Enforcement(Enum):
    AUTOMATED = "Automated"
    PARTIALLY_AUTOMATED = "Partially Automated"
    NON_AUTOMATED = "Non-automated"

class RuleInfo(NamedTuple):
    obligation: Obligation
    enforcement: Enforcement
    message: str

autosar_rule_info = {
    "M0-1-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A project shall not contain unreachable code."),
    "A0-1-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The value returned by a function having a non-void return type that is not an overloaded operator shall be used."),
    "A0-1-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used."),
    "M0-1-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A project shall not contain unused variables."),
    "A0-1-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "There shall be no unused named parameters in non-virtual functions."),
    "A0-1-6": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "There should be no unused type declarations."),
    "M0-1-10": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "Every defined function should be called at least once."),
    "A0-4-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Type long double shall not be used."),
    "A2-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code."),
    "A2-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Trigraphs shall not be used."),
    "A2-5-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Digraphs shall not be used."),
    "A2-7-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The character \ shall not occur as a last character of a C++ comment."),
    "M2-7-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The character sequence /* shall not be used within a C-style comment."),
    "M2-10-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Different identifiers shall be typographically unambiguous."),
    "A2-10-6": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope."),
    "A2-11-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Volatile keyword shall not be used."),
    "A2-13-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used."),
    "M2-13-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Octal constants (other than zero) and octal escape sequences (other than \"\\0\" ) shall not be used."),
    "A2-13-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Type wchar_t shall not be used."),
    "M2-13-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type."),
    "A2-13-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "String literals shall not be assigned to non-constant pointers."),
    "M2-13-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Literal suffixes shall be upper case."),
    "A2-13-5": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "Hexadecimal constants should be upper case."),
    "A2-13-6": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Universal character names shall be used only inside character or string literals."),
    "A3-1-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Header files, that are defined locally in the project, shall have a file name extension of one of: \".h\", \".hpp\" or \".hxx\"."),
    "M3-1-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Functions shall not be declared at block scope."),
    "A3-1-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "When an array with external linkage is declared, its size shall be stated explicitly."),
    "A3-3-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Static and thread-local objects shall be constant-initialized."),
    "M3-3-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "If a function has internal linkage then all re-declarations shall include the static storage class specifier."),
    "M3-4-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An identifier declared to be an object or type shall be defined in a block that minimizes its visibility."),
    "A3-9-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types."),
    "A4-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary & operator, and the relational operators <, <=, >, >=."),
    "M4-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator."),
    "M4-5-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator."),
    "A4-10-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Only nullptr literal shall be used as the null-pointer-constant."),
    "M4-10-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "NULL shall not be used as an integer value."),
    "M4-10-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Literal zero (0) shall not be used as the null-pointer-constant."),
    "A5-0-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The condition of an if-statement and the condition of an iteration statement shall have type bool."),
    "A5-0-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The declaration of objects shall contain no more than two levels of pointer indirection."),
    "M5-0-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An implicit integral conversion shall not change the signedness of the underlying type."),
    "M5-0-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "There shall be no implicit floating-integral conversions."),
    "M5-0-6": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An implicit integral or floating-point conversion shall not reduce the size of the underlying type."),
    "M5-0-10": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "If the bitwise operators ~and << are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand."),
    "M5-0-11": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The plain char type shall only be used for the storage and use of character values."),
    "M5-0-12": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Signed char and unsigned char type shall only be used for the storage and use of numeric values."),
    "M5-0-14": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The first operand of a conditional-operator shall have type bool."),
    "M5-0-16": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array."),
    "M5-0-20": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Non-constant operands to a binary bitwise operator shall have the same underlying type."),
    "M5-0-21": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Bitwise operators shall only be applied to operands of unsigned underlying type."),
    "A5-1-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Variables shall not be implicitly captured in a lambda expression."),
    "A5-1-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Parameter list (possibly empty) shall be included in every lambda expression."),
    "A5-1-6": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "Return type of a non-void return type lambda expression should be explicitly specified."),
    "A5-1-7": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A lambda shall not be an operand to decltype or typeid."),
    "A5-1-8": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "Lambda expressions should not be defined inside another lambda expression."),
    "A5-2-1": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "dynamic_cast should not be used."),
    "A5-2-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Traditional C-style casts shall not be used."),
    "A5-2-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A cast shall not remove any const or volatile qualification from the type of a pointer or reference."),
    "A5-2-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "reinterpret_cast shall not be used."),
    "A5-2-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An array or container shall not be accessed beyond its range."),
    "M5-2-9": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A cast shall not convert a pointer type to an integral type."),
    "M5-2-10": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression."),
    "M5-2-11": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The comma operator, && operator and the || operator shall not be overloaded."),
    "M5-2-12": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An identifier with array type passed as a function argument shall not decay to a pointer."),
    "M5-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Each operand of the ! operator, the logical && or the logical || operators shall have type bool."),
    "A5-3-2": RuleInfo(Obligation.REQUIRED, Enforcement.PARTIALLY_AUTOMATED, "Null pointers shall not be dereferenced."),
    "M5-3-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The unary minus operator shall not be applied to an expression whose underlying type is unsigned."),
    "A5-3-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Pointers to incomplete class types shall not be deleted."),
    "M5-3-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The unary & operator shall not be overloaded."),
    "M5-3-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Evaluation of the operand to the sizeof operator shall not contain side effects."),
    "A5-6-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The right hand operand of the integer division or remainder operators shall not be equal to zero."),
    "M5-14-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The right hand operand of a logical &&, || operators shall not contain side effects."),
    "A5-16-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The ternary conditional operator shall not be used as a sub-expression."),
    "M5-18-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The comma operator shall not be used."),
    "M6-2-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Assignment operators shall not be used in sub-expressions."),
    "M6-2-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character."),
    "M6-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement."),
    "M6-4-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement."),
    "M6-4-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "All if ... else if constructs shall be terminated with an else clause."),
    "M6-4-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An unconditional throw or break statement shall terminate every non-empty switch-clause."),
    "M6-4-6": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The final clause of a switch statement shall be the default-clause."),
    "M6-4-7": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The condition of a switch statement shall not have bool type."),
    "A6-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used."),
    "A6-5-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A for loop shall contain a single loop-counter which shall not have floating-point type."),
    "M6-5-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=."),
    "A6-5-3": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "Do statements should not be used."),
    "M6-5-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The loop-counter shall not be modified within condition or statement."),
    "A6-5-4": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "For-init-statement and expression should not perform actions other than loop-counter initialization and modification."),
    "M6-5-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop."),
    "M6-5-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A loop-control-variable other than the loop-counter shall not be modified within condition or expression."),
    "M6-5-6": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A loop-control-variable other than the loop-counter which is modified in statement shall have type bool."),
    "A6-6-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The goto statement shall not be used."),
    "M6-6-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement."),
    "M6-6-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The goto statement shall jump to a label declared later in the same function body."),
    "M6-6-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The continue statement shall only be used within a well-formed for loop."),
    "A7-1-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Constexpr or const specifiers shall be used for immutable data declaration."),
    "A7-1-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name."),
    "A7-1-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The register keyword shall not be used."),
    "A7-1-6": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The typedef specifier shall not be used."),
    "A7-1-7": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Each expression statement and identifier declaration shall be placed on a separate line."),
    "A7-2-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Enumeration underlying base type shall be explicitly defined."),
    "A7-2-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Enumerations shall be declared as scoped enum classes."),
    "A7-2-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized."),
    "M7-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The global namespace shall only contain main, namespace declarations and extern \"C\" declarations."),
    "M7-3-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The identifier main shall not be used for a function other than the global function main."),
    "M7-3-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "There shall be no unnamed namespaces in header files."),
    "M7-3-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Using-directives shall not be used."),
    "M7-3-6": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files."),
    "A7-4-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The asm declaration shall not be used."),
    "M7-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.NON_AUTOMATED, "A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function."),
    "A7-5-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Functions shall not call themselves, either directly or indirectly."),
    "A7-6-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Functions declared with the [[noreturn]] attribute shall not return."),
    "M8-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments."),
    "A8-4-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Functions shall not be defined using the ellipsis notation."),
    "A8-4-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "All exit paths from a function with non-void return type shall have an explicit return statement with an expression."),
    "M8-4-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration."),
    "A8-4-7": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "\"in\" parameters for \"cheap to copy\" types shall be passed by value."),
    "A8-5-0": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "All memory shall be initialized before it is read."),
    "A8-5-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Braced-initialization {}, without equals sign, shall be used for variable initialization."),
    "M8-5-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures."),
    "A8-5-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A variable of type auto shall not be initialized using {} or ={} braced-initialization."),
    "M9-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Const member functions shall not return non-const pointers or references to class-data."),
    "A9-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Unions shall not be used."),
    "A9-6-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Bit-fields shall be either unsigned integral, or enumeration (with underlying type of unsigned integral type)."),
    "M10-1-1": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "Classes should not be derived from virtual bases."),
    "A10-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Virtual function declaration shall contain exactly one of the three specifiers: (1) virtual, (2) override, (3) final."),
    "A10-3-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Each overriding virtual function shall be declared with the override or final specifier."),
    "A10-3-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Virtual functions shall not be introduced in a final class."),
    "M10-3-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual."),
    "A10-3-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A user-defined assignment operator shall not be virtual."),
    "A11-0-1": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "A non-POD type should be defined as class."),
    "M11-0-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Member data in non-POD class types shall be private."),
    "A11-0-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class."),
    "A11-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Friend declarations shall not be used."),
    "A12-1-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type."),
    "A12-1-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "All constructors that are callable with a single argument of fundamental type shall be declared explicit."),
    "A12-4-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Destructor of a base class shall be public virtual, public override or protected non-virtual."),
    "A12-4-2": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "If a public destructor of a class is non-virtual, then the class should be declared final."),
    "A12-8-2": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "User-defined copy and move assignment operators should use user-defined no-throw swap function."),
    "A12-8-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A copy assignment and a move assignment operators shall handle self-assignment."),
    "A12-8-7": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "Assignment operators should be declared with the ref-qualifier &."),
    "A13-2-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An assignment operator shall return a reference to \"this\"."),
    "A13-2-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "A relational operator shall return a boolean value."),
    "A13-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "If “operator[]” is to be overloaded with a non-const version, const version shall also be implemented."),
    "A13-5-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "All user-defined conversion operators shall be defined explicit."),
    "A13-5-3": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "User-defined conversion operators should not be used."),
    "A13-6-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits."),
    "A15-1-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "An exception object shall not be a pointer."),
    "M15-1-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "NULL shall not be thrown explicitly."),
    "M15-3-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point."),
    "M15-3-6": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class."),
    "A15-4-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Dynamic exception-specification shall not be used."),
    "A15-4-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "If a function is declared to be noexcept, noexcept(true) or noexcept(<true condition>), then it shall not exit with an exception."),
    "A15-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate."),
    "M16-0-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Arguments to a function-like macro shall not contain tokens that look like pre-processing directives."),
    "M16-0-7": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator."),
    "M16-0-8": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token."),
    "M16-1-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The defined pre-processor operator shall only be used in one of the two standard forms."),
    "A16-2-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The ', \", /*, //, \ characters shall not occur in a header file name or in #include directive."),
    "A16-2-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "There shall be no unused include directives."),
    "M16-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "There shall be at most one occurrence of the # or ## operators in a single macro definition."),
    "M16-3-2": RuleInfo(Obligation.ADVISORY, Enforcement.AUTOMATED, "The # and ## operators should not be used."),
    "A16-6-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "#error directive shall not be used."),
    "A16-7-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The #pragma directive shall not be used."),
    "A17-0-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined."),
    "M17-0-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The setjmp macro and the longjmp function shall not be used."),
    "A18-0-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The C library facilities shall only be accessed through C++ library headers."),
    "A18-0-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The library <clocale> (locale.h) and the setlocale function shall not be used."),
    "M18-0-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The library functions abort, exit, getenv and system from library <cstdlib> shall not be used."),
    "M18-0-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The time handling functions of library <ctime> shall not be used."),
    "M18-0-5": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The unbounded functions of library <cstring> shall not be used."),
    "A18-1-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "C-style arrays shall not be used."),
    "A18-1-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The std::vector<bool> specialization shall not be used."),
    "A18-1-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The std::auto_ptr type shall not be used."),
    "M18-2-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The macro offsetof shall not be used."),
    "A18-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Functions malloc, calloc, realloc and free shall not be used."),
    "A18-5-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The form of delete operator shall match the form of new operator used to allocate the memory."),
    "M18-7-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The signal handling facilities of <csignal> shall not be used."),
    "A18-9-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The std::bind shall not be used."),
    "A18-9-3": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The std::move shall not be used on objects declared const or const&."),
    "M19-3-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The error indicator errno shall not be used."),
    "A21-8-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Arguments to character-handling functions shall be representable as an unsigned char."),
    "A26-5-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Pseudorandom numbers shall not be generated using std::rand()."),
    "A26-5-2": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "Random number engines shall not be default-initialized."),
    "M27-0-1": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "The stream input/output library <cstdio> shall not be used."),
    "A27-0-4": RuleInfo(Obligation.REQUIRED, Enforcement.AUTOMATED, "C-style strings shall not be used."),
}

def getInfoForRule(rule: str) -> Optional[RuleInfo]:
    return autosar_rule_info.get(rule)
