//===--- AutocheckWarnings.def - Autocheck diagnostic data ----------------===//
//
// Copyright (C) 2023 SYRMIA
// Part of the Autocheck Project, under the Apache License v2.0.
// See LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//
//
// This file contains all data regarding autocheck diagnostics wrapped as macros
// to be used in other files.
//
// There are two types of diagnostics: Warnings and Notes. Signatures of the
// macros are:
//   DIAG(ENUM, FLAG, MESSAGE, RULE)
//   NOTE(ENUM, MESSAGE)
//
//===----------------------------------------------------------------------===//

#ifndef DIAG
#error "DIAG macro not defined"
#endif

#ifndef NOTE
#define NOTE
#endif

NOTE(reemitNote, "%0")
DIAG(hashhashOpUsed, "hash-hash-op-used",
     "The # and ## operators should not be used", "M16-3-2")
DIAG(clibHeaderUsed, "clib-header-used",
     "The C library facilities shall only be accessed through C++ library "
     "headers",
     "A18-0-1")
DIAG(csignalUsed, "csignal-used",
     "The signal handling facilities of <csignal> shall not be used", "M18-7-1")
DIAG(cstdioUsed, "cstdio-used",
     "The stream input/output library <cstdio> shall not be used", "M27-0-1")
DIAG(ctimeUsed, "ctime-used",
     "The time handling functions of library <ctime> shall not be used",
     "M18-0-4")
DIAG(localeHeaderUsed, "locale-header-used",
     "The library <clocale> (locale.h) and the setlocale function shall not be "
     "used",
     "A18-0-3")
DIAG(pragmaDirectiveUsed, "pragma-directive-used",
     "The #pragma directive shall not be used", "A16-7-1")
DIAG(headerExtension, "header-extension",
     "Header files, that are defined locally in the project, shall have a file "
     "name extension of one of: \".h\", \".hpp\" or \".hxx\"",
     "A3-1-2")
DIAG(errnoUsed, "errno-used", "The error indicator errno shall not be used",
     "M19-3-1")
DIAG(offsetofUsed, "offsetof-used", "The macro offsetof shall not be used",
     "M18-2-1")
DIAG(setjmpLongjmpUsed, "setjmp-longjmp-used",
     "The setjmp macro and the longjmp function shall not be used", "M17-0-5")
DIAG(bothHashOpUsed, "both-hash-op-used",
     "There shall be at most one occurrence of the # or ## operators in a "
     "single macro definition",
     "M16-3-1")
DIAG(expansionToDefined, "expansion-to-defined",
     "The defined pre-processor operator shall only be used in one of the two "
     "standard forms",
     "M16-1-1")
DIAG(reservedIdentifiers, "reserved-identifiers",
     "Reserved identifiers, macros and functions in the C++ standard library "
     "shall not be defined, redefined or undefined",
     "A17-0-1")
DIAG(embeddedDirective, "embedded-directive",
     "Arguments to a function-like macro shall not contain tokens that look "
     "like pre-processing directives",
     "M16-0-5")
DIAG(digraphsUsed, "digraphs-used", "Digraphs shall not be used", "A2-5-2")
DIAG(trigraphsUsed, "trigraphs-used", "Trigraphs shall not be used", "A2-5-1")
DIAG(hexConstUpperCase, "hex-const-upper-case",
     "Hexadecimal constants should be upper case", "A2-13-5")
DIAG(includeDirectiveRestrictedChar, "include-directive-restricted-char",
     "The ', \", /*, //, \\ characters shall not occur in a header file name "
     "or in #include directive",
     "A16-2-1")
DIAG(lineCommentLastChar, "line-comment-last-char",
     "The character \\ shall not occur as a last character of a C++ comment",
     "A2-7-1")
DIAG(preprocessorTokenError, "preprocessor-token-error",
     "If the # token appears as the first token on a line, then it shall be "
     "immediately followed by a pre-processing token",
     "M16-0-8")
DIAG(directiveErrorUsed, "directive-error-used",
     "#error directive shall not be used", "A16-6-1")
DIAG(commentStartInComment, "comment",
     "The character sequence /* shall not be used within a C-style comment",
     "M2-7-1")
DIAG(octalConstantUsed, "octal-constant-used",
     "Octal constants (other than zero) and octal escape sequences (other than "
     "\"\\0\") shall not be used",
     "M2-13-2")
DIAG(nonIsoEscapeSequence, "non-iso-escape-sequence",
     "Only those escape sequences that are defined in ISO/IEC 14882:2014 shall "
     "be used",
     "A2-13-1")
DIAG(nonCppStandardCharUsed, "non-cplusplus-standard-char-used",
     "Only those characters specified in the C++ Language Standard basic "
     "source character set shall be used in the source code",
     "A2-3-1")
DIAG(literalSuffixLowerCase, "literal-suffix-lower-case",
     "Literal suffixes shall be upper case", "M2-13-4")
DIAG(digitSequenceSeparator, "digit-sequence-separator",
     "Digit sequences separators ' shall only be used as follows: (1) for "
     "decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for "
     "binary, every 4 digits",
     "A13-6-1")
DIAG(nonUniversalNames, "non-universal-names",
     "Universal character names shall be used only inside character or string "
     "literals",
     "A2-13-6")
DIAG(unsignedLiteralSuffix, "unsigned-literal-suffix",
     "A \"U\" suffix shall be applied to all octal or hexadecimal integer "
     "literals of unsigned type",
     "M2-13-3")
DIAG(similarIdentifiers, "similar-identifiers",
     "Different identifiers shall be typographically unambiguous", "M2-10-1")
DIAG(shadowClassOrEnum, "shadow-class-or-enum",
     "A class or enumeration name shall not be hidden by a variable, function "
     "or enumerator declaration in the same scope",
     "A2-10-6")
DIAG(fixedWidthIntegerTypes, "fixed-width-integer-types",
     "Fixed width integer types from <cstdint>, indicating the size and "
     "signedness, shall be used in place of the basic numerical types",
     "A3-9-1")
DIAG(nullStatementNotAlone, "null-stmt-not-alone",
     "Before preprocessing, a null statement shall only occur on a line by "
     "itself; it may be followed by a comment, provided that the first "
     "character following the null statement is a white-space character",
     "M6-2-3")
DIAG(usingInsideHeader, "using-inside-header",
     "Using-directives and using-declarations (excluding class scope or "
     "function scope using-declarations) shall not be used in header files",
     "M7-3-6")
DIAG(separateLineExpressionStatement, "separate-line-expression-statement",
     "Each expression statement and identifier declaration shall be placed on "
     "a separate line",
     "A7-1-7")
DIAG(ifElseIfTerminated, "if-else-if-terminated",
     "All if ... else if constructs shall be terminated with an else clause",
     "M6-4-2")
DIAG(gotoLabelBlock, "goto-label-block",
     "Any label referenced by a goto statement shall be declared in the same "
     "block, or in a block enclosing the goto statement",
     "M6-6-1")
DIAG(switchStmtDefaultClause, "switch-stmt-default-clause",
     "The final clause of a switch statement shall be the default-clause",
     "M6-4-6")
DIAG(doWhileUsed, "do-while-used", "Do statements should not be used", "A6-5-3")
DIAG(derivedFromVirtual, "derived-from-virtual",
     "Classes should not be derived from virtual bases", "M10-1-1")
DIAG(virtualFuncSpecifier, "virtual-func-specifier",
     "Virtual function declaration shall contain exactly one of the three "
     "specifiers: (1) virtual, (2) override, (3) final",
     "A10-3-1")
DIAG(overrideFuncSpecifier, "override-func-specifier",
     "Each overriding virtual function shall be declared with the override or "
     "final specifier",
     "A10-3-2")
DIAG(virtualMethodFinalClass, "virtual-method-final-class",
     "Virtual functions shall not be introduced in a final class", "A10-3-3")
DIAG(pureFuncOverride, "pure-func-override",
     "A virtual function shall only be overridden by a pure virtual function "
     "if it is itself declared as pure virtual",
     "M10-3-3")
DIAG(memberDataPrivate, "member-data-private",
     "Member data in non-POD class types shall be private", "M11-0-1")
DIAG(nonPodAsClass, "non-pod-as-class",
     "A non-POD type should be defined as class", "A11-0-1")
DIAG(explicitCtors, "explicit-ctors",
     "All constructors that are callable with a single argument of fundamental "
     "type shall be declared explicit",
     "A12-1-4")
DIAG(finalClassDestructor, "final-class-destructor",
     "If a public destructor of a class is non-virtual, then the class should "
     "be declared final",
     "A12-4-2")
DIAG(relOpBoolValue, "rel-op-bool-value",
     "A relational operator shall return a boolean value", "A13-2-3")
DIAG(implicitConversionOp, "implicit-conversion-op",
     "All user-defined conversion operators shall be defined explicit",
     "A13-5-2")
DIAG(conversionOpUsed, "conversion-op-used",
     "User-defined conversion operators should not be used", "A13-5-3")
DIAG(subscriptOpOverload, "subscript-op-overload",
     "If \"operator[]\" is to be overloaded with a non-const version, const "
     "version shall also be implemented",
     "A13-5-1")
DIAG(unusedFunctionOrMethod, "unused-function-or-method",
     "%select{Unused function %1|Unused private method %1}0", "A0-1-3")
DIAG(nonConstReturnedFromConst, "non-const-returned-from-const",
     "Const member functions shall not return non-const pointers or references "
     "to class-data",
     "M9-3-1")
DIAG(swapNotInCopyAndMoveAssignment, "swap-not-in-copy-and-move-assignment",
     "User-defined copy and move assignment operators should use user-defined "
     "no-throw swap function",
     "A12-8-2")
DIAG(unionsUsed, "unions-used", "Unions shall not be used", "A9-5-1")
DIAG(changedDefaultArguments, "changed-default-arguments",
     "Parameters in an overriding virtual function shall either use the same "
     "default arguments as the function they override, or else shall not "
     "specify any default arguments",
     "M8-3-1")
DIAG(asmDeclarationUsed, "asm-declaration-used",
     "The asm declaration shall not be used", "A7-4-1")
DIAG(variadicFunctionUsed, "variadic-function-used",
     "Functions shall not be defined using the ellipsis notation", "A8-4-1")
DIAG(functionRedeclParams, "function-redecl-params",
     "The identifiers used for the parameters in a re-declaration of a "
     "function shall be identical to those in the declaration",
     "M8-4-2")
DIAG(inParamPassedByValue, "in-param-passed-by-value",
     "%select{Type %1 is \"cheap to copy\" and should be passed by value|Type "
     "%1 is not \"cheap to copy\" and should be passed by const reference}0",
     "A8-4-7")
NOTE(noteInParamPassedByValue, "Template is instantiated with type %0 here")
DIAG(autoVarBracedInit, "auto-var-braced-init",
     "A variable of type auto shall not be initialized using {} or ={} "
     "braced-initialization",
     "A8-5-3")
DIAG(nonBracedInit, "non-braced-init-used",
     "Braced-initialization {}, without equals sign, shall be used for "
     "variable initialization",
     "A8-5-2")
DIAG(unusedTypedef, "unused-typedef",
     "Unused %select{typedef|type alias}0 %1", "A0-1-6")
DIAG(cvQualifiersPlacedLeft, "cv-qualifiers-placed-left",
     "CV-qualifiers shall be placed on the right hand side of the type that is "
     "a typedef or a using name",
     "A7-1-3")
DIAG(assignmentOperatorReturnType, "assignment-operator-return-type",
     "An assignment operator shall return a reference to \"this\"", "A13-2-1")
DIAG(constUnusedForImmutableData, "const-unused-for-immutable-data",
     "Constexpr or const specifiers shall be used for immutable data "
     "declaration",
     "A7-1-1")
DIAG(nsdmiAndCtorInitUsed, "nsdmi-and-ctor-init-used",
     "Both NSDMI and a non-static member initializer in a constructor shall "
     "not be used in the same type",
     "A12-1-2")
NOTE(notePreviousMemberInitialization,
     "Member already initialized by NSDMI here")
DIAG(broadScopeIdentifier, "broad-scope-identifier",
     "An identifier declared to be an object or type shall be defined in a "
     "block that minimizes its visibility",
     "M3-4-1")
DIAG(missingBracesOrElements, "missing-braces-or-elements",
     "Braces shall be used to indicate and match the structure in the non-zero "
     "initialization of arrays and structures",
     "M8-5-2")
DIAG(constantInitializer, "constant-initializer",
     "Static and thread-local objects shall be constant-initialized", "A3-3-2")
DIAG(randomEngineDefaultInitialized, "random-engine-default-initialized",
     "Random number engines shall not be default-initialized", "A26-5-2")
NOTE(noteUnsafeSeed,
     "Random engines should exclusively be initialized using values produced "
     "directly via random_device from <random> header")
DIAG(pointerIndirectionLevels, "pointer-indirection-levels",
     "The declaration of objects shall contain no more than two levels of "
     "pointer indirection",
     "A5-0-3")
DIAG(throwInNoexceptFunc, "throw-in-noexcept-func",
     "If a function is declared to be noexcept, noexcept(true) or "
     "noexcept(<true condition>), then it shall not exit with an exception",
     "A15-4-2")
NOTE(noteThrowInNoexceptFunc,
     "%select{%1 has a non-throwing exception specification but can still "
     "throw | Cannot call not noexcept function from the noexcept function}0")
DIAG(ctorsDtorsDeallocMoveSwapNoexcept,
     "ctors-dtors-deallocation-move-swap-noexcept",
     "All user-provided class destructors, deallocation functions, move "
     "constructors, move assignment operators and swap functions shall not "
     "exit with an exception. A noexcept exception specification shall be "
     "added to these functions as appropriate",
     "A15-5-1")
DIAG(mismatchedNewDelete, "mismatched-new-delete",
     "The form of delete operator shall match the form of new operator used to "
     "allocate the memory",
     "A18-5-3")
NOTE(noteMismatchedNewDelete,
     "'%select{delete|new}0%select{|[]}1' applied to a pointer that was "
     "allocated with 'new%select{[]|}1'; %select{did you mean "
     "'delete%select{[]|}1'?|possible problem with delete operator}0")
DIAG(cStyleStringUsed, "c-style-string-used",
     "C-style strings shall not be used", "A27-0-4")
DIAG(lambdaDecltypeTypeid, "lambda-decltype-typeid",
     "A lambda shall not be an operand to decltype or typeid", "A5-1-7")
DIAG(implicitlyCapturedVar, "implicitly-captured-var",
     "Variables shall not be implicitly captured in a lambda expression",
     "A5-1-2")
DIAG(incDecOpMixed, "inc-dec-operator-mixed",
     "The increment (++) and decrement (--) operators shall not be mixed with "
     "other operators in an expression",
     "M5-2-10")
DIAG(ternaryOpSubExpr, "ternary-op-sub-expr",
     "The ternary conditional operator shall not be used as a sub-expression",
     "A5-16-1")
DIAG(assignmentOpSubExpr, "assignment-op-sub-expr",
     "Assignment operators shall not be used in sub-expressions", "M6-2-1")
DIAG(
    nestedLambda, "nested-lambda",
    "Lambda expressions should not be defined inside another lambda expression",
    "A5-1-8")
DIAG(lambdaReturnTypeUnspecified, "lambda-return-type-unspecified",
     "Return type of a non-void return type lambda expression should be "
     "explicitly specified",
     "A5-1-6")
DIAG(stdMoveUsedConst, "std-move-used-const",
     "The std::move shall not be used on objects declared const or const&",
     "A18-9-3")
DIAG(characterHandlingFunctions, "character-handling-functions",
     "Arguments to character-handling functions shall be representable as an "
     "unsigned char",
     "A21-8-1")
DIAG(cstdlibMemfuncUsed, "cstdlib-memfunc-used",
     "Functions malloc, calloc, realloc and free shall not be used", "A18-5-1")
DIAG(cstdlibFuncUsed, "cstdlib-func-used",
     "The library functions abort, exit, getenv and system from library "
     "<cstdlib> shall not be used",
     "M18-0-3")
DIAG(cstringFuncUsed, "cstring-func-used",
     "The unbounded functions of library <cstring> shall not be used",
     "M18-0-5")
DIAG(stdBindUsed, "std-bind-used", "The std::bind shall not be used", "A18-9-1")
DIAG(stdRandUsed, "std-rand-used",
     "Pseudorandom numbers shall not be generated using std::rand()", "A26-5-1")
DIAG(implicitBitwiseBinopConversion, "implicit-bitwise-binop-conversion",
     "Non-constant operands to a binary bitwise operator shall have the same "
     "underlying type",
     "M5-0-20")
DIAG(invalidBoolExpression, "invalid-bool-expression",
     "Expressions with type bool shall not be used as operands to built-in "
     "operators other than the assignment operator = , the logical operators "
     "&& , || , ! , the equality operators == and != , the unary & operator, "
     "and the conditional operator",
     "M4-5-1")
DIAG(invalidEnumExpression, "invalid-enum-expression",
     "Expressions with type enum or enum class shall not be used as operands "
     "to built-in and overloaded operators other than the subscript operator [ "
     "], the assignment operator =, the equality operators == and !=, the "
     "unary & operator, and the relational operators <, <=, >, >=",
     "A4-5-1")
DIAG(
    invalidCharExpression, "invalid-char-expression",
    "Expressions with type (plain) char and wchar_t shall not be used as "
    "operands to built-in operators other than the assignment operator = , the "
    "equality operators == and != , and the unary & operator",
    "M4-5-3")
DIAG(implicitFloatIntegralConversion, "implicit-float-integral-conversion",
     "There shall be no implicit floating-integral conversions", "M5-0-5")
DIAG(implicitSizeReductionConversion, "implicit-size-reduction-conversion",
     "An implicit integral or floating-point conversion shall not reduce the "
     "size of the underlying type",
     "M5-0-6")
DIAG(implicitBitwiseResultConversion, "implicit-bitwise-result-conversion",
     "If the bitwise operators ~ and << are applied to an operand with an "
     "underlying type of unsigned char or unsigned short, the result shall be "
     "immediately cast to the underlying type of the operand",
     "M5-0-10")
DIAG(arrayDecaysToPointer, "array-decays-to-pointer",
     "%select{An identifier with array type passed as a function argument "
     "shall not decay to a pointer: '%1' -> '%2'|A function argument with "
     "pointer type shall not be used as an array|An array of derived class "
     "objects shall not decay to a base class pointer: '%1' -> '%2'}0",
     "M5-2-12")
DIAG(nullToIntegerValue, "null-to-integer-value",
     "NULL shall not be used as an integer value", "M4-10-1")
DIAG(zeroToNullPointer, "zero-to-null-pointer",
     "Literal zero (0) shall not be used as the null-pointer-constant",
     "M4-10-2")
DIAG(nullptrOnlyNullPtrConst, "nullptr-only-null-ptr-const",
     "Only nullptr literal shall be used as the null-pointer-constant",
     "A4-10-1")
DIAG(charStorage, "char-storage",
     "The plain char type shall only be used for the storage and use of "
     "character values",
     "M5-0-11")
DIAG(signCharStorage, "sign-char-storage",
     "Signed char and unsigned char type shall only be used for the storage "
     "and use of numeric values",
     "M5-0-12")
DIAG(contiditionNotBool, "condition-not-bool",
     "The condition of an if-statement and the condition of an iteration "
     "statement shall have type bool",
     "A5-0-2")
DIAG(singleLoopCounterFloatType, "single-loop-counter-float-type",
     "A for loop shall contain a single loop-counter which shall not have "
     "floating-point type",
     "A6-5-2")
DIAG(nonLoopCounterBool, "non-loop-counter-bool",
     "A loop-control-variable other than the loop-counter which is modified in "
     "statement shall have type bool",
     "M6-5-6")
DIAG(continueStmtWellFormedLoop, "continue-stmt-well-formed-loop",
     "The continue statement shall only be used within a well-formed for loop",
     "M6-6-3")
DIAG(nonLoopCounterModified, "non-loop-counter-modified",
     "A loop-control-variable other than the loop-counter shall not be "
     "modified within condition or expression",
     "M6-5-5")
DIAG(loopCounterModified, "loop-counter-modified",
     "The loop-counter shall not be modified within condition or statement",
     "M6-5-3")
DIAG(condExprIncDecLoop, "cond-expr-inc-dec-loop",
     "If loop-counter is not modified by -- or ++, then, within condition, the "
     "loop-counter shall only be used as an operand to <=, <, > or >=",
     "M6-5-2")
DIAG(initIncPartsLoopCounter, "init-inc-parts-loop-counter",
     "For-init-statement and expression should not perform actions other than "
     "loop-counter initialization and modification",
     "A6-5-4")
DIAG(
    containerLoopIllFormed, "container-loop-ill-formed",
    "A for-loop that does not use its loop-counter (in a way that prevents the "
    "substitution of the loop with a range-based for-loop) shall not be used",
    "A6-5-1")
DIAG(loopCounterIllModified, "loop-counter-ill-modified",
     "The loop-counter shall be modified by one of: --, ++, -= n, or += n; "
     "where n remains constant for the duration of the loop",
     "M6-5-4")
DIAG(headersUnused, "headers-unused",
     "There shall be no unused include directives: %0", "A16-2-2")
DIAG(headersUnusedSystemOff, "headers-unused-system-off",
     "There shall be no unused include directives: %0", "A16-2-2")
DIAG(headersUnusedSystemSmart, "headers-unused-system-smart",
     "There shall be no unused include directives: %0", "A16-2-2")
NOTE(noteHeadersUnusedIncluded, "Already included by header: %0")
NOTE(noteHeadersUnusedUsed,
     "But one or more of it's own #include directives is used")
DIAG(unusedReturnValue, "unused-return-value",
     "The value returned by a function having a non-void return type that is "
     "not an overloaded operator shall be used",
     "A0-1-2")
DIAG(selfAssignmentUnhandled, "self-assignment-unhandled",
     "A copy assignment and a move assignment operators shall handle "
     "self-assignment",
     "A12-8-5")
DIAG(volatileKeywordUsed, "volatile-keyword-used",
     "Volatile keyword shall not be used", "A2-11-1")
DIAG(typeWchartUsed, "type-wchart-used", "Type wchar_t shall not be used",
     "A2-13-3")
DIAG(externArrayImplicitSize, "extern-array-implicit-size",
     "When an array with external linkage is declared, its size shall be "
     "stated explicitly",
     "A3-1-4")
DIAG(dynamicCastUsed, "dynamic-cast-used", "dynamic_cast should not be used",
     "A5-2-1")
DIAG(reinterpretCastUsed, "reinterpret-cast-used",
     "reinterpret_cast shall not be used", "A5-2-4")
DIAG(gotoUsed, "goto-used", "The goto statement shall not be used", "A6-6-1")
DIAG(typedefUsed, "typedef-used", "The typedef specifier shall not be used",
     "A7-1-6")
DIAG(enumTypeNotDefined, "enum-type-not-defined",
     "Enumeration underlying base type shall be explicitly defined", "A7-2-2")
DIAG(friendUsed, "friend-used", "Friend declarations shall not be used",
     "A11-3-1")
DIAG(cStyleArrayUsed, "c-style-array-used", "C-style arrays shall not be used",
     "A18-1-1")
DIAG(sizeofSideEffect, "sizeof-side-effect",
     "Evaluation of the operand to the sizeof operator shall not contain side "
     "effects",
     "M5-3-4")
DIAG(deprecatedDynamicExceptionSpec, "deprecated-dynamic-exception-spec",
     "Dynamic exception-specification shall not be used", "A15-4-1")
DIAG(boolVectorSpecializationUsed, "bool-vector-specialization-used",
     "The std::vector<bool> specialization shall not be used", "A18-1-2")
DIAG(longDoubleUsed, "long-double-used", "Type long double shall not be used",
     "A0-4-2")
DIAG(functionAtBlockScope, "function-at-block-scope",
     "Functions shall not be declared at block scope", "M3-1-2")
DIAG(staticFunctionRedeclaration, "static-function-redeclaration",
     "If a function has internal linkage then all re-declarations shall "
     "include the static storage class specifier",
     "M3-3-2")
DIAG(conditionalOpOperandType, "conditional-op-operand-type",
     "The first operand of a conditional-operator shall have type bool",
     "M5-0-14")
DIAG(lambdaDeclaratorMissing, "lambda-declarator-missing",
     "Parameter list (possibly empty) shall be included in every lambda "
     "expression",
     "A5-1-3")
DIAG(castPtrToIntegralType, "cast-ptr-to-integral-type",
     "A cast shall not convert a pointer type to an integral type", "M5-2-9")
DIAG(commaAndOrOpsOverloaded, "comma-and-or-ops-overloaded",
     "The comma operator, && operator and the || operator shall not be "
     "overloaded",
     "M5-2-11")
DIAG(notAndOrOpsBoolOperands, "not-and-or-ops-bool-operands",
     "Each operand of the ! operator, the logical && or the logical || "
     "operators shall have type bool",
     "M5-3-1")
DIAG(unaryMinusOnUnsignedType, "unary-minus-on-unsigned-type",
     "The unary minus operator shall not be applied to an expression whose "
     "underlying type is unsigned",
     "M5-3-2")
DIAG(unaryAmpOpOverloaded, "unary-amp-op-overloaded",
     "The unary & operator shall not be overloaded", "M5-3-3")
DIAG(rhsOperandAndOrSideEffect, "rhs-operand-and-or-side-effect",
     "The right hand operand of a logical &&, || operators shall not contain "
     "side effects",
     "M5-14-1")
DIAG(notCompoundStatement, "not-compound-statement",
     "The statement forming the body of a switch, while, do ... while or for "
     "statement shall be a compound statement",
     "M6-3-1")
DIAG(gotoBackJump, "goto-back-jump",
     "The goto statement shall jump to a label declared later in the same "
     "function body",
     "M6-6-2")
DIAG(enumNotScopedEnumClass, "enum-not-scoped-enum-class",
     "Enumerations shall be declared as scoped enum classes", "A7-2-3")
DIAG(enumeratorInitialization, "enumerator-initialization",
     "In an enumeration, either (1) none, (2) the first or (3) all enumerators "
     "shall be initialized",
     "A7-2-4")
DIAG(identifierMainReused, "identifier-main-reused",
     "The identifier main shall not be used for a function other than the "
     "global function main",
     "M7-3-2")
DIAG(unnamedNamespaceInHeader, "unnamed-namespace-in-header",
     "There shall be no unnamed namespaces in header files", "M7-3-3")
DIAG(usingDirectiveUsed, "using-directive-used",
     "Using-directives shall not be used", "M7-3-4")
DIAG(exceptionObjectIsPointer, "exception-object-is-pointer",
     "An exception object shall not be a pointer", "A15-1-2")
DIAG(nullThrownExplicitly, "null-thrown-explicitly",
     "NULL shall not be thrown explicitly", "M15-1-2")
DIAG(assignmentOpRefQual, "assignment-op-ref-qual",
     "Assignment operators should be declared with the ref-qualifier &",
     "A12-8-7")
DIAG(assignmentOpVirtual, "assignment-op-virtual",
     "A user-defined assignment operator shall not be virtual", "A10-3-5")
DIAG(globalNamespaceNodes, "global-namespace-nodes",
     "The global namespace shall only contain main, namespace declarations and "
     "extern \"C\" declarations",
     "M7-3-1")
DIAG(bitFieldUnsignedIntegral, "bit-field-unsigned-integral",
     "Bit-fields shall be either unsigned integral, or enumeration (with "
     "underlying type of unsigned integral type)",
     "A9-6-1")
DIAG(bitwiseOperandNotUnsigned, "bitwise-operand-not-unsigned",
     "Bitwise operators shall only be applied to operands of unsigned "
     "underlying type",
     "M5-0-21")
DIAG(ifFollowedByCompoundStmt, "if-followed-by-compound-stmt",
     "An if ( condition ) construct shall be followed by a compound statement. "
     "The else keyword shall be followed by either a compound statement, or "
     "another if statement",
     "M6-4-1")
DIAG(cStyleCastUsed, "c-style-cast-used",
     "Traditional C-style casts shall not be used", "A5-2-2")
DIAG(castRemovesQual, "cast-removes-qual",
     "A cast shall not remove any const or volatile qualification from the "
     "type of a pointer or reference",
     "A5-2-3")
NOTE(noteCastRemovesQual,
     "%select{cast from %1 to %2 drops %select{const and volatile "
     "qualifiers|const qualifier|volatile qualifier}3|cast from %1 to %2 "
     "must have all intermediate pointers const qualified to be safe}0")
DIAG(impcastChangesSignedness, "impcast-changes-signedness",
     "An implicit integral conversion shall not change the signedness of the "
     "underlying type",
     "M5-0-4")
NOTE(noteImpcastChangesSignedness, "Casts '%0' to '%1'")
DIAG(unusedParameter, "unused-parameter", "Unused parameter %0", "A0-1-4")
DIAG(exceptionHandlerInversion, "exception-handler-inversion",
     "Where multiple handlers are provided in a single try-catch statement or "
     "function-try-block for a derived class and some or all of its bases, the "
     "handlers shall be ordered most-derived to base class",
     "M15-3-6")
NOTE(noteExceptionHandlerInversion, "previous handler was here")
DIAG(returnStackAddress, "return-stack-address",
     "A function shall not return a reference or a pointer to an automatic "
     "variable (including parameters), defined within the function",
     "M7-5-1")
DIAG(properStructure, "proper-structure",
     "A type defined as struct shall: %select{(1) provide only public data "
     "members|(2) not provide any special member functions or methods|(3) not "
     "be a base of another struct or class|(4) not inherit from another struct "
     "or class}0",
     "A11-0-2")
NOTE(noteProperStructure, "inherited struct is here")
DIAG(baseDestructor, "base-destructor",
     "Destructor of a base class shall be public virtual, public override or "
     "protected non-virtual",
     "A12-4-1")
NOTE(noteBaseDestructor,
     "%select{destructor is declared here|class has implicit destructor}0")
DIAG(commaOperatorUsed, "comma-operator-used",
     "The comma operator shall not be used", "M5-18-1")
DIAG(returnNonVoidFunction, "return-nonvoid-function",
     "All exit paths from a function with non-void return type shall have an "
     "explicit return statement with an expression",
     "A8-4-2")
DIAG(breakSwitchCase, "break-switch-case",
     "An unconditional throw or break statement shall terminate every "
     "non-empty switch-clause",
     "M6-4-5")
DIAG(uninitializedMemory, "uninitialized-memory",
     "All memory shall be initialized before it is read", "A8-5-0")
DIAG(registerKeywordUsed, "register-keyword-used",
     "The register keyword shall not be used", "A7-1-4")
DIAG(typeAutoPtrUsed, "type-auto-ptr-used",
     "The std::auto_ptr type shall not be used", "A18-1-3")
DIAG(invalidNoreturn, "invalid-noreturn",
     "Functions declared with the [[noreturn]] attribute shall not return",
     "A7-6-1")
DIAG(arrayBounds, "array-bounds",
     "An array or container shall not be accessed beyond its range", "A5-2-5")
DIAG(deleteIncomplete, "delete-incomplete",
     "Pointers to incomplete class types shall not be deleted", "A5-3-3")
DIAG(switchBool, "switch-bool",
     "The condition of a switch statement shall not have bool type", "M6-4-7")
DIAG(unusedFunction, "unused-function",
     "Every defined function should be called at least once", "M0-1-10")
DIAG(writableString, "writable-strings",
     "String literals shall not be assigned to non-constant pointers",
     "A2-13-4")
DIAG(undefMacroUsed, "undef-macro-used",
     "Undefined macro identifiers shall not be used in #if or #elif "
     "pre-processor directives, except as operands to the defined operator",
     "M16-0-7")
DIAG(unusedVariable, "unused-variable", "Unused variable %0", "M0-1-3")
DIAG(divByZero, "div-by-zero",
     "The right hand operand of the integer division or remainder operators "
     "shall not be equal to zero",
     "A5-6-1")
DIAG(pointerSub, "pointer-sub",
     "A pointer operand and any pointer resulting from pointer arithmetic "
     "using that operand shall both address elements of the same array",
     "M5-0-16")
DIAG(recursionUsed, "recursion-used",
     "Functions shall not call themselves, either directly or indirectly",
     "A7-5-2")
DIAG(unreachableCode, "unreachable-code",
     "A project shall not contain unreachable code", "M0-1-1")
DIAG(nullDereference, "null-dereference",
     "Null pointers shall not be dereferenced", "A5-3-2")
DIAG(handlerOfCompatibleType, "handler-of-compatible-type",
     "Each exception explicitly thrown in the code shall have a handler of a "
     "compatible type in all call paths that could lead to that point",
     "M15-3-4")

#undef DIAG
#undef NOTE
